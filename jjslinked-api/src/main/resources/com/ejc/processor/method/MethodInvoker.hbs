
@MethodRef("{{methodRef}}")
@TypeRef("{{typeRef}}")
public class MethodInvoker1 implement MethodInvoker  {

    private static final List<? extends Annotation> ANNOTATIONS = Arrays.asList();// TODO

    private static final List<Class<?>> PARAMETER_TYPES = Arrays.asList();// TODO Types als String ohne Anf√ºhrungszeichen einsetzen

    private static final MethodContext METHOD_CONTEXT = MethodContext.builder()
        .annotations(ANNOTATIONS)
        .className("{{className}}")
        .parameterTypes(PARAMETER_TYPES)
        .signature("{{signature}}")
        .build();

    private static ParameterProvider<> DEFAULT_PROVIDER = MessageParameterProvider.class;


    public void onEvent(Object obj, ApplicationContext applicationContext) {
        if (event instanceof {{eventType}}) {
            {{eventType}} event = ({{eventType}}) obj;
             if (applicationContext.getBean({{invokerEventDeciderClass}}.class).shouldInvoke(METHOD_CONTEXT, event)) {
                invoke(event, applicationContext);
             }
        }
    }

    public void invoke({{eventType}} event, ApplicationContext applicationContext) {
        applicationContext.getBean({{targetClass}}.class).{{methodName}}(
        {{#interate parameters ", "}}
         getParamterProvider({{}})
        {{/interate}});
    }

    private ParameterProvider<?> getParameterProvider(Parameter parameter, ApplicationContext applicationContext) {
        return applicationContext.getBean(getParameterProviderClass(parameter));
    }

    private Class<? extends ParameterProvider<?>> getParameterProviderClass(Parameter parameter) {
        if (parameter.getProviderAnnotation() == null) {
            return DEFAULT_PROVIDER;
        }
        return ProviderRegistry.getParameterProvider(parameter.getProviderAnnotation());
    }
}