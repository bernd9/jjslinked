package {{packageName}};

import com.jjslinked.model.ClientMessage;
import com.jjslinked.invokation.InvokerDispatcher;
import static com.jjslinked.parameters.Converter.*;

// TODO remove this file
public class {{simpleName}}Invoker  {

    enum Methods {
        {{#implementedMethods}}
        {{qualifier}},
        {{/implementedMethods}}
    }

    private final {{simpleName}} {{instanceName}};
    {{#implementedMethods}}
    private final {{proxyName}} {{proxyInstanceName}};
    {{/implementedMethods}}

    public {{simpleName}}Invoker({{simpleName}} {{instanceName}}) {
        this.{{instanceName}} = {{instanceName}};
        {{#implementedMethods}}
        this.{{proxyInstanceName}} = new {{proxyName}}({{instanceName}});
        {{/implementedMethods}}
    }

    public void invoke(ClientMessage message) {
        switch(Methods.valueOf(message.getMethod())) {
        {{#implementedMethods}}
        case {{qualifier}} : break;
        {{/implementedMethods}}
        default: throw new IllegalArgumentException(message.getMethod());
        }
    }

     {{#implementedMethods}}
     private static class {{proxyName}} {

        private final {{../simpleName}} {{../instanceName}};

        {{proxyName}}({{../simpleName}} {{instanceName}}) {
            this.{{instanceName}} = {{instanceName}};
        }

        void invoke(ClientMessage message) {
            this.{{../instanceName}}.{{./name}}({{#iterate parameters ", "}}{{name}}Param(message){{/iterate}});
        }

        {{#parameters}}
        private {{type}} {{name}}Param(ClientMessage message) {
           {{#ifEqual parameterType "USER_ID"}}return message.getUserId().orElseThrow();{{/ifEqual}}
           {{#ifEqual parameterType "CLIENT_ID"}}return message.getClientId().orElseThrow();{{/ifEqual}}
           {{#ifEqual parameterType "CHARACTER_SEQUENCE"}}return convert(message.getParameter("{{name}}"), {{type}}.class);{{/ifEqual}}
           {{#ifEqual parameterType "PRIMITIVE"}}return convert(message.getParameter("{{name}}"), {{type}});{{/ifEqual}}
           {{#ifEqual parameterType "PRIMITIVE_WRAPPER"}}return convert(message.getParameter("{{name}}"), {{type}}.class);{{/ifEqual}}
           {{#ifEqual parameterType "COMPLEX"}}return convert(message.getParameter("{{name}}"), {{type}}.class);{{/ifEqual}}
        }
        {{/parameters}}

     }
     {{/implementedMethods}}
}