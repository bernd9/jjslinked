package {{packageName}};

import com.jjslinked.model.ClientMessage;
import com.jjslinked.invokation.InvokerDispatcher;

public class {{simpleName}}Invoker  {

    enum Methods {
        {{#abstractMethods}}
        {{qualifier}},
        {{/abstractMethods}}
    }

    private final {{simpleName}} {{instanceName}};
    {{#abstractMethods}}
    private final {{proxyName}} {{proxyInstanceName}};
    {{/abstractMethods}}

    public {{simpleName}}Invoker({{simpleName}} {{instanceName}}) {
        this.{{instanceName}} = {{instanceName}};
        {{#abstractMethods}}
        this.{{proxyInstanceName}} = new {{proxyName}}({{instanceName}});
        {{/abstractMethods}}
    }

    public void invoke(ClientMessage message) {
        switch(Methods.valueOf(message.getMethod())) {
        {{#abstractMethods}}
        case {{qualifier}} : break;
        {{/abstractMethods}}
        default: throw new IllegalArgumentException(message.getMethod());
        }
    }

     {{#implementedMethods}}
     private static class {{proxyName}} {

        private final {{simpleName}} {{instanceName}};

        {{proxyName}}({{simpleName}} {{instanceName}}) {
            this.{{instanceName}} = {{instanceName}};
        }

        void invoke(ClientMessage message) {
            this.{{instanceName}}.{{name}}();
        }

        {{#parameters}}
        private {{type}} {{name}}Param(ClientMessage message) {
            return null;
        }
        {{/parameters}}

     }
     {{/implementedMethods}}



}